# Use Space ROS image
FROM osrf/space-ros:latest

# Inheritence issue, ROS_DISTRO does not get inherited from the base image
ARG ROS_DISTRO="humble"
ENV ROS_DISTRO=${ROS_DISTRO}

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    sudo apt-get update -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3-rosinstall-generator \
    libboost-python-dev build-essential cmake libboost-all-dev libois-dev \
    libzzip-dev libfreeimage-dev libfreetype6-dev libx11-dev libxt-dev libxaw7-dev \
    libsdl2-dev libpugixml-dev libglew-dev qtbase5-dev libspdlog-dev libfmt-dev \
    libignition-gazebo6-dev libssl-dev devscripts debian-keyring fakeroot debhelper \
    libboost-dev libsasl2-dev libicu-dev libzstd-dev doxygen libtinyxml-dev \
    libtinyxml2-dev python3-pyqt5 tzdata locales keyboard-configuration

RUN sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && sudo dpkg-reconfigure --frontend=noninteractive locales \
    && sudo update-locale LANG=en_US.UTF-8

# Install dependencies and ROS 2 packages
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    sudo apt-get update -y && sudo apt-get install -y \
    build-essential \
    clang-format \
    cmake \
    git \
    libbullet-dev \
    python3-colcon-common-extensions \
    python3-flake8 \
    python3-pip \
    python3-pytest-cov \
    python3-rosdep \
    python3-setuptools \
    python3-vcstool \
    wget \
    bc \
    bind9-utils \
    binutils \
    ca-certificates \
    clang \
    cmake \
    file \
    firewalld \
    git \
    git-lfs \
    jq \
    kbd \
    kmod \
    less \
    lsb-release \
    libglu1-mesa-dev \
    libxcb-xinerama0 \
    libfontconfig1-dev \
    libcurl4-openssl-dev \
    libnvidia-gl-470 \
    libssl-dev \
    libxcb-xkb-dev \
    libxkbcommon-x11-dev \
    libxkbcommon-dev \
    libxcb-xfixes0-dev \
    libxcb-xinput-dev \
    libxcb-xinput0 \
    libpcre2-16-0 \
    lsof \
    net-tools \
    ninja-build \
    pciutils \
    software-properties-common \
    tar \
    unzip \
    vim \
    xz-utils \
    libunwind-dev \
    libzstd-dev

# Install Python dependencies
RUN python3 -m pip install -U Jinja2 typeguard

# Remove rmw_fastrtps_cpp
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \ 
    sudo apt-get remove -y ros-humble-rmw-fastrtps-cpp

# Recreate the source directory for debugging later on
RUN mkdir ${SPACEROS_DIR}/src \
  && vcs import ${SPACEROS_DIR}/src < ${SPACEROS_DIR}/exact.repos

WORKDIR ${SPACEROS_DIR}

# Enable installing ROS2 Humble packages from binary
RUN sudo sh -c 'echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
RUN sudo curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

# Update rosdep
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  sudo apt-get update -y
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  sudo apt-get dist-upgrade -y
RUN rosdep update

# Build the workspace
# WORKDIR ${SPACEROS_DIR}
# RUN colcon build --packages-ignore cobra_vendor

# Install ROS 2 packages needed by ROS 2 Gem in O3DE
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  sudo apt-get install -y \
  ros-${ROS_DISTRO}-ackermann-msgs \
  ros-${ROS_DISTRO}-gazebo-msgs \
  ros-${ROS_DISTRO}-joy \
  ros-${ROS_DISTRO}-navigation2 \
  ros-${ROS_DISTRO}-rviz2 \
  ros-${ROS_DISTRO}-tf2-ros \
  ros-${ROS_DISTRO}-urdfdom \
  ros-${ROS_DISTRO}-vision-msgs

# The above unwantedly installed rmw-fastrtps-cpp, remove it
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
    sudo apt-get remove -y ros-humble-rmw-fastrtps-cpp

# Clone O3DE and the required Gems and projects
WORKDIR ${SPACEROS_DIR}
RUN mkdir O3DE \
    && cd O3DE \
    && mkdir Projects \
    && mkdir Gems \
    && cd ${SPACEROS_DIR}/O3DE/Projects \
    && git clone --branch nasa_submission https://github.com/Mechazo11/RobotSim.git \
    && cd ${SPACEROS_DIR}/O3DE/Gems \
    && git clone --branch nasa_submission https://github.com/Mechazo11/NasaCuriosityRoverGem.git \
    && git clone --branch nasa_submission https://github.com/Mechazo11/MarsYardGem.git

# Download O3DE engine and extras
WORKDIR ${SPACEROS_DIR}
RUN git clone --single-branch -b development https://github.com/o3de/o3de.git \
    && cd o3de \
    && git lfs install \
    && git lfs pull \
    && python/get_python.sh \
    && git clone --single-branch -b development https://github.com/o3de/o3de-extras.git \
    && cd o3de-extras \
    && git lfs install \
    && git lfs pull

RUN git clone --single-branch -b development https://github.com/o3de/o3de-extras.git \
    && cd o3de-extras \
    && git lfs install \
    && git lfs pull

# Register the project and Gems
WORKDIR ${SPACEROS_DIR}/o3de
RUN ./scripts/o3de.sh register --this-engine \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/o3de-extras/Gems/ROS2 \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/o3de-extras/Gems/RosRobotSample \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/o3de-extras/Gems/WarehouseSample \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/O3DE/Gems/NasaCuriosityRoverGem \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/O3DE/Gems/MarsYardGem \
    && ./scripts/o3de.sh register --gem-path ${SPACEROS_DIR}/o3de/Gems/Terrain \
    && ./scripts/o3de.sh register --project-path ${SPACEROS_DIR}/O3DE/Projects/RobotSim

# Set up environment and build the RobotSim project
WORKDIR $SPACEROS_DIR/O3DE/Projects/RobotSim

# RUN source /opt/ros/humble/setup.bash \
#     && source $SPACEROS_DIR/install/setup.bash \
#     && cmake -B build/linux -G "Ninja Multi-Config" -DLY_DISABLE_TEST_MODULES=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLY_STRIP_DEBUG_SYMBOLS=ON -DAZ_USE_PHYSX5:BOOL=ON

# Add the user to the render group so that the user can access /dev/dri/renderD128
# /dev/dri/renderD128 gives access to hardware-accelerated rendering tool such as GPU
RUN sudo usermod -aG render $USERNAME

# Setup the entrypoint
# COPY ./entrypoint.sh /
# ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
